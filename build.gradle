buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'maven-publish'

version = '1.0.0'
group = 'com.blakebr0.mysticalcustomization'
archivesBaseName = 'MysticalCustomization-1.15.2'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

repositories {
    maven { url "http://dvs1.progwml6.com/files/maven/" }
    maven { url "http://tehnut.info/maven/" }

    flatDir { dirs '../MysticalAgriculture/build/libs' }

    mavenLocal()
    jcenter()
}

minecraft {
    mappings channel: 'snapshot', version: '20200225-1.15.1'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath};${project.file("out/production/classes").canonicalPath}"
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath};${project.file("out/production/classes").canonicalPath}"
        }

        data {
            workingDirectory project.file('run')

            properties 'forge.logging.markers': 'REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            properties 'fml.earlyprogresswindow': 'false'

            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath};${project.file("out/production/classes").canonicalPath}"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.15.2-31.1.35'

    compile files('../Cucumber/build/libs/Cucumber-1.15.2-3.0.3-deobf.jar')
    runtimeOnly files('../MysticalAgriculture/build/libs/MysticalAgriculture-1.15.2-3.0.2-deobf.jar')
    compileOnly fg.deobf(name: 'MysticalAgriculture-1.15.2-3.0.2-api')
    compile fg.deobf('mcp.mobius.waila:Hwyla:1.10.7-B71_1.15.1')
    compileOnly fg.deobf("mezz.jei:jei-1.15.2:6.0.0.2:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.15.2:6.0.0.2")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Mystical Customization",
            "Specification-Vendor": "BlakeBr0",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor": "BlakeBr0",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}